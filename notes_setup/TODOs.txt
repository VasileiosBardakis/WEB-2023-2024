Paradoxes:
- Offer gia 1 item, kai de kanei reference to announcement.
- Trigger gia assume task isxuei mono an ginei update se hdh uparxon
offer/request. An kapoios admin kanei insert task apeutheias mporei
na kseperastei to orio
- SQL credentials se .env omws exei bug to package
- Cancelled offers and requests could be kept with a 'deleted' status but they are not as important
- Announcements are independent to offers. Offers can be generated endlessly, but announcements can be deleted without impacting them.
- To kathe request/offer thelei 1 QUANTITY gia na oloklirwthei
- To koubi complete task den einai sto table alla se popup

Bugs:   
Check if 2 people can assume same task
To prevent assuming already assumed task, do UPDATE on status=0 ONLY
Maybe change tasks to 2 panels? offers and requests?

- Triggers for tasks dont work
- On admin: Map is short and console errors on map
- If you decrease width enough, elements may appear on top of sidebar or be behind it (use javascript from citizen)
- Make every "window" have same padding and margin so sidebar doesnt change size

- If you press "Show map" fast enough two tables appear (?) FIX: MOVING INNERTEXT = "" INSIDE THE XHR SO WHEN IT SUCCEEDS ERASE
- Scrolling horizontally makes sidebar glitch out FIX: Z-INDEX 99999
- On mobile: elements make page unzoomable, breaks the sidebar (FIX: make sidebar take up the whole width)

Requests of civilian:
PERSON requests ITEM for # PEOPLE and ITS STATUS

Use css display instead of innerhtml rewrites (computationally expensive)
https://stackoverflow.com/questions/11144274/javascript-changing-innerhtml-vs-display

Button inside list:
https://stackoverflow.com/questions/4853563/how-do-i-submit-a-form-with-a-li-instead-of-a-submit-button

Autocomplete:
https://stackoverflow.com/questions/10711823/jquery-vs-dom-performance
https://jqueryui.com/autocomplete/
https://www.w3schools.com/js/js_json_html.asp
https://www.w3schools.com/tags/tag_optgroup.asp#:~:text=The%20tag%20is%20used,to%20handle%20for%20a%20user.
https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event

Side by side inputs:
<div>
    <label>Hello</label>
    <input type="text" />
</div>
<div>
    <label>Hello</label>
    <input type="text" />
</div>

div {
    display: inline-block;
}

div label {
    display: block;
}


TODO:

Move complete button to task table (compare with var coords)

Make tables look the same across the site

Update every other element when something is clicked/updates etc.

Error alerts and handling on EVERYTHING (frontend backend) (done for admin)
Clean up api endpoints (done on admin)

UPDATE ${table} SET rescuer = (?), status=1, date_accepted=NOW() WHERE id = (?) AND status=0



Server side:
- Change column names (date offered/requested) or alias on api
Also to sort those tasks maybe have composite api call that does the sql,
unions the 2 tables and orders by date
- When something changes (base relocation, new offer, new announcement)
have sql watcher and update everyone's currently logged in homepage
and cross validate sql entries in case they are on older data and they're not valid yet
- let instead of var
- Fix sql auth (where username = ?)
- Proper GET/POST responses (error message, update error message on client screen etc)



Web design:
- Make font scale with screen size (unreadable on mobile)
- If media < 768px, make everything stack vertically
- Make body have no scroll but only the inside elements (so canvas) */
- Make user_table have scroll inside */


Rescuer:
- WORKING ASSUME TASK
- offer complete, cancel, update tables, in proximity popup
- On assume task, redraw map
- Manage tasks: Handle header names being from different api calls
- For mapping (status codes, item id's) gather DISTINCT item id's query val -> map



Citizen:
- on cancel, check if cancellable (might be old data) and show message "cant cancel, picked up"
- For mapping (status codes, item id's) gather DISTINCT item id's query val -> map



Caching:
https://zeropointdevelopment.com/speed-up-your-website-using-caching-and-htaccess/


Check if geolocation is enabled and place rescuer vehicle there. check every 10 seconds



Finishing touches:

Add error message fade:
.error-message {
    color: red;
    opacity: 1;
    transition: opacity 0.5s ease-in-out;
}

.error-message.fade-out {
    opacity: 0;
}

document.addEventListener('DOMContentLoaded', function() {
    const errorMessage = document.getElementById('errorMessage');

    // Set a timeout to add the 'fade-out' class after 5 seconds
    setTimeout(function() {
        errorMessage.classList.add('fade-out');
    }, 5000);
});
Set display to none when it ends

Database normalization (one-to-many etc)

Register: To column scalearei me to megalutero item, kanta aneksartita

On table load: make each row appear with fade

Handle SQL errors (e.g. when admin change db a user might be trying to access item that no longer exists) with sending response
On server error, close connection instead of closing server

Bad input for make request

Reorganize each route to different js folders (like app/, storage/ etc. so index.js is not as cluttered)

To register sto test.html thewritika tha prepe na xei animation alla den doulevei
https://mdbootstrap.com/docs/standard/extended/login/


-plat
prettier error handling when request bigger than existing quantity
