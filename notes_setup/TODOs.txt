Paradoxes:
- Offer gia 1 item, kai de kanei reference to announcement.
- Trigger gia assume task isxuei mono an ginei update se hdh uparxon
offer/request. An kapoios admin kanei insert task apeutheias mporei
na kseperastei to orio
- SQL credentials se .env omws exei bug to package
- Cancelled offers and requests could be kept with a 'deleted' status but they are not as important
- Announcements are independent to offers. Offers can be generated endlessly, but announcements can be deleted without impacting them.

Bugs:
- On load cargo, everything closes
- Login error replaces whole screen instead of error-message
- When scrolling, div goes inside sidebar
- When you logout and then go 1 page back you log back in
- Massive bugs on mobile
- On the new sidebar: div text sometimes splits up and changes line
- On mobile: table makes page unzoomable, breaks the sidebar (happened on old sidebar too)
- Map doesnt refresh correctly



Requests of civilian:
PERSON requests ITEM for # PEOPLE and ITS STATUS

Use css display instead of innerhtml rewrites (computationally expensive)
https://stackoverflow.com/questions/11144274/javascript-changing-innerhtml-vs-display

Button inside list:
https://stackoverflow.com/questions/4853563/how-do-i-submit-a-form-with-a-li-instead-of-a-submit-button

Autocomplete:
https://stackoverflow.com/questions/10711823/jquery-vs-dom-performance
https://jqueryui.com/autocomplete/
https://www.w3schools.com/js/js_json_html.asp
https://www.w3schools.com/tags/tag_optgroup.asp#:~:text=The%20tag%20is%20used,to%20handle%20for%20a%20user.
https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event

Side by side inputs:
<div>
    <label>Hello</label>
    <input type="text" />
</div>
<div>
    <label>Hello</label>
    <input type="text" />
</div>

div {
    display: inline-block;
}

div label {
    display: block;
}


TODO:
idea/probably not good: When loading the html things, load all the xml requests too
e.g. Load cargo and map together
When you change something on map (like unloading) also refresh cargo

Server side:
- Change column names (date offered/requested) or alias on api
Also to sort those tasks maybe have composite api call that does the sql,
unions the 2 tables and orders by date
- When something changes (base relocation, new offer, new announcement)
have sql watcher and update everyone's currently logged in homepage
and cross validate sql entries in case they are on older data and they're not valid yet
- let instead of var
- Fix sql auth (where username = ?)
- Proper GET/POST responses (error message, update error message on client screen etc)
- xmlhttp -> fetch
- Remove item_name from cargo



Web design:
- Make font scale with screen size (unreadable on mobile)
- on mobile: make table go under map so its readable
- If media < 700px, make everything stack vertically
- On mobile make sidebar scale with canvas size and make canvas scrollable (tables)



Rescuer:
- WORKING ASSUME TASK
- WORKING TASK TABLE
- offer complete, cancel, update tables, in proximity popup
- On assume task, reload window
- Table in rescuer tasks user_table colors and action column
- Manage tasks: Handle header names being from different api calls
- Custom map markers for every possible entity
- For mapping (status codes, item id's) gather DISTINCT item id's query val -> map
- If no tasks show message instead of table



Citizen:
- on cancel, check if cancellable (might be old data) and show message "cant cancel, picked up"
- For mapping (status codes, item id's) gather DISTINCT item id's query val -> map



Caching:
https://zeropointdevelopment.com/speed-up-your-website-using-caching-and-htaccess/
Check if geolocation is enabled and place rescuer vehicle there. check every 10 seconds



Finishing touches:
Database normalization (one-to-many etc)

Register: To column scalearei me to megalutero item, kanta aneksartita

Use # instead of . for unique elements

On table load: make each row appear with fade (end goal)

Handle SQL errors (e.g. when admin change db a user might be trying to access item that no longer exists) with sending response
On server error, close connection instead of closing server

Bad input for make request

Reorganize each route to different js folders (like app/, storage/ etc. so index.js is not as cluttered)

To register sto test.html thewritika tha prepe na xei animation alla den doulevei
https://mdbootstrap.com/docs/standard/extended/login/


-plat
prettier error handling when request bigger than existing quantity 
to Tasks Header einai visible an kai to mapContainer einai hidden !?
-

